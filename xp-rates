Here's my little xprate-counter, you are welcome to use it.
It prints average xp/hour, total gained xp in what time, how much you have to next level and how many minutes to next level.

## output ingame looks like this:
xps: 222k /h, gained: 152k xp in 41 mins.
tnl: 177k xp in 48 mins.
## another example:
xps: 437k /h, gained: 1.03m xp in 141 mins.
tnl: 52k xp in 7 mins.

##################JMC###################
jmc settings to add to your settings file below andchange script language to jscript in options
"xp" shows you xprates
"xpp" emotes the xprates to the room
"xpreset" resets all info to 0
the action just resets xp at login, can be removed
the subs gags/hides output you dont need to see, less clutter

#alias {xp} {inf gainedxprates %x %X} {default}
#alias {xpp} {inf showgainedxprates %x %X} {default}
#alias {xpreset} {inf resetxprates %x} {default}
#action {Never forget! Try to role-play...} {xpreset} {default}
#substitute {showgainedxprates %1 %2} {.}
#substitute {resetxprates %1} {.}
#substitute {gainedxprates %1 %2} {.}

################jscripts###################
add everything below to commonlib.scr, if you already have a bunch of stuff there, like OnIncomingLine(),
copy the stuff inside it into your funtion, and add the rest at the end of the file

jmc.RegisterHandler("Input", "OnInput()");
jmc.RegisterHandler("Incoming", "OnIncomingLine()");

/**
 * JMC Event Handlers
 */
function OnInput()
{

}

function OnIncomingLine()
{
	var line = jmc.Event;
	
	if ( startXpReg.exec(line) ){
		var xparray = /(\d+)/.exec(line);
		startXp = parseInt( xparray[1] );
		startXpDate = new Date();
		jmc.parse( "#showme [XP-rates are reset]" );
	}
	
	if ( currentXpReg.exec(line) ){
		var xparray = /(\d+)\s(\d+)/.exec(line);
		gainedExperience(xparray);
	}
	
	if ( emoteCurrentXpReg.exec(line) ){
		var xparray = /(\d+)\s(\d+)/.exec(line);
		showGainedExperience(xparray);			
	}
}

/**
 * XP-RATE SCRIPT
 **/
var startXp = 0;
var startXpDate = new Date();
var startXpReg = /^resetxprates\s\d+/;
var currentXpReg = /^gainedxprates\s\d+\s\d+/;
var emoteCurrentXpReg = /^showgainedxprates\s\d+\s\d+/;
var xpPerHour;
var gainedXp;
var minutes;
var tnl;
var minsToLevel;

function calcXprates(xparray){
	var currentDate = new Date();
	var totalSeconds = (currentDate.getTime()-startXpDate.getTime())/1000;
    minutes = 1 + ( Math.floor(totalSeconds / 60) ); // starts on minute 1
	var currentXp = parseInt( xparray[1] );
	var currentTnl = parseInt( xparray[2] );
	var xpPerMin = 0;
	gainedXp = currentXp - startXp;
	
	if ( gainedXp > 0 ){xpPerMin = Math.round( gainedXp / minutes );}
	xpPerHour = ( xpPerMin * 60 );

	if ( currentTnl == 0 ){ 
		minsToLevel = 0; 
	}else if ( xpPerMin == 0 ){	
		minsToLevel = "infinity";
	}else{ 
		minsToLevel = Math.round( currentTnl / xpPerMin ); 
	}
	
	if ( xpPerHour >= 1000 ){xpPerHour = Math.round( xpPerHour/1000 ) + "k";}
	if ( currentTnl >= 1000 && currentTnl < 1000000 ){
		currentTnl = ( Math.round( currentTnl/1000 ) ) + "k";
	}else if(currentTnl >= 1000000){
		currentTnl = ( Math.round( ( currentTnl/1000000 ) * 100 ) /100 ) + "m";
	}
	tnl = currentTnl; // sends tnl to global variable
	
	if ( gainedXp >= 1000 && gainedXp < 1000000 ){
		gainedXp = ( Math.round( gainedXp/1000 ) ) + "k";	
	}else if ( gainedXp >= 1000000 ){
		gainedXp = ( Math.round( ( gainedXp/1000000 ) * 100 ) /100 ) + "m";
	}
}

function gainedExperience(xparray){
	calcXprates(xparray);
	jmc.parse("#showme xps: " + xpPerHour + " /h, gained: " + gainedXp + " xp in " + minutes + " mins." );
	jmc.parse("#showme tnl: " + tnl + " xp in " + minsToLevel + " mins." );
}

function showGainedExperience(xparray){
	calcXprates(xparray);
	jmc.parse("emote xps: " + xpPerHour + " /h, gained: " + gainedXp + " xp in " + minutes + " mins." );
	jmc.parse("emote tnl: " + tnl + " xp in " + minsToLevel + " mins." );
}
